<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alex030502.github.io</id>
    <title>wwwzh&apos;blog</title>
    <updated>2020-12-03T23:19:29.818Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://alex030502.github.io"/>
    <link rel="self" href="https://alex030502.github.io/atom.xml"/>
    <subtitle>I AK NOIP</subtitle>
    <logo>https://alex030502.github.io/images/avatar.png</logo>
    <icon>https://alex030502.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, wwwzh&apos;blog</rights>
    <entry>
        <title type="html"><![CDATA[最小生成树算法Prim&Kruskal]]></title>
        <id>https://alex030502.github.io/post/最小生成树prim&amp;kruskal/</id>
        <link href="https://alex030502.github.io/post/最小生成树prim&amp;kruskal/">
        </link>
        <updated>2020-11-29T13:56:53.000Z</updated>
        <content type="html"><![CDATA[<p>Prim&amp;Kruskal<br>
Prim:以任意一条边作为起点找出他联通的最小边，再以起连通的最小边的另一断点作为起点重复以上操作并判断是否访问过该边，访问过就跳过，直至遍历n个点</p>
<p>思想：类似dijiskar</p>
<p>适用于稠密图；</p>
<p>kruskal：以所有边中的最小边作为起点，用并查集进行辅助，不断录入最小边，并将该边的两个节点入集合，使用过的进行标记，防止重复访问</p>
<p>思想：算是贪心吧。。<br>
代码见P2820 局域网<br>
适用于稀疏图（边少）</p>
<p>Prim's CODE：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
int n,m;
const int MAX=100001;
int map[MAX][MAX];
bool b[1001];
int minn=MAX;
inline int read(){
	char c=getchar();
	int f=1;
	int x=0;
	while(c&lt;'0'||c&gt;'9'){
		if(c=='-') f=-1;
		c=getchar();
	}
	while(c&lt;='9'&amp;&amp;c&gt;='0'){
		x=x*10+c-'0';
		c=getchar();
	}
	return x*f;
}
int main(){
	n=read();
	m=read();
	int t,t1,t2;
	for(int i=1;i&lt;=n;i++){
		for(int j=1;j&lt;=n;j++){
			if(i==j) continue;
			map[i][j]=MAX;
		}
	}
	b[1]=1;
	for(int i=1;i&lt;=m;i++){
		
	}
	prim(1);
	
	return 0;
}
</code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[堆]]></title>
        <id>https://alex030502.github.io/post/dui/</id>
        <link href="https://alex030502.github.io/post/dui/">
        </link>
        <updated>2020-11-29T13:50:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="堆在完全二叉树上维护具有可重复贡献性的数据结构">#堆(在完全二叉树上维护具有可重复贡献性的数据结构)</h1>
<p>本质是依靠完全二叉树进行实现（及满足左子节点编号为父节点编号<em>2，右子节点为父节点编号</em>2+1</p>
<p>1.大根堆: 对于任意的父节点的值一定大于等于其子节点————&gt;任意节点一定是以它为根建立的树的最大值</p>
<p>2.小根堆: 对于任意的父节点的值一定小于等于其子节点————&gt;任意节点一定是以它为根建立的树的最小值</p>
<p>que：（堆可做区间查询最值）</p>
<p>sol：堆没有进行维护堆中左右</p>
<p>操作:</p>
<p>1.put 向堆中加入元素</p>
<pre><code>1. 在堆尾加入一个元素并以这个结点为当前结点

2.比较当前结点和它父结点的大小，如果当前节点值小、大于父节点，则进行交换并把当前节点置为当前结点。重复执行2；

3，直到不满足结束
</code></pre>
<p>2.get 从堆中取出并删除根结点元素<br>
1.把堆中最后一个元素（及下标为len（堆中元素个数）的与父节点交换，个数-1<br>
2.把根节点置为当前父节点pa<br>
3.如果pa无孩子，则进行5，否则把pa的左右孩子中最小的哪一个置为当前子节点son<br>
4。比较pa与son的值，如果fa的值小于等于son，则转5，否则，把pa指向son转3<br>
5.结束</p>
<p>CODE:</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
int heap[10001];
int len=0;
int t;

void put(int t1){
	heap[++len]=t;
	int son=len;
	int fa=son&gt;&gt;1;
	while(son&gt;1){
		fa=son&gt;&gt;1;
		if(heap[fa]&gt;heap[son]){
			heap[0]=heap[son];
			heap[son]=heap[fa];
			heap[fa]=heap[0];
			son=son&gt;&gt;1;
		}
		else return; 
	}	
}
void get(){
	heap[0]=heap[len];
	heap[len]=heap[1];
	heap[1]=heap[0];
	len--;
	int pa=1,son=pa&lt;&lt;1;
	int tmp1,tmp2;
	while(son&lt;=len){
		if(son==len) son=pa&lt;&lt;1;
		tmp1=heap[son];
		tmp2=heap[son+1];
		if(tmp1&gt;tmp2){
			son=son+1;
		}
		if(heap[pa]&gt;heap[son]){
			heap[0]=heap[son];
			heap[son]=heap[pa];
			heap[pa]=heap[0]; 
			pa=son;
			son=pa&lt;&lt;1; 
		} 
		else return;
	}
}
int main(){
	int n;
	cin&gt;&gt;n;
	for(int i=1;i&lt;=n;i++){
		cin&gt;&gt;t;
		put(t);
	}
	for(int i=1;i&lt;=n;i++){
		cout&lt;&lt;heap[1]&lt;&lt;&quot; &quot;;
		get();
	}
	return 0;
}
'''
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图]]></title>
        <id>https://alex030502.github.io/post/map/</id>
        <link href="https://alex030502.github.io/post/map/">
        </link>
        <updated>2020-11-29T12:33:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="图">图</h1>
<p>G(V,E) 其中V表示点数，E表示表数</p>
<h2 id="无向图">无向图</h2>
<pre><code>图的边没有方向，可以双向
</code></pre>
<h2 id="有向图">有向图</h2>
<pre><code>图的边有方向，只能按方向从一点到另一点
</code></pre>
<h2 id="完全图">完全图</h2>
<pre><code>一个n阶的完全无向图含有n*（n-1)/2条边；
一个n阶的完全有向图含有n*（n-1）条边
</code></pre>
<h2 id="稠密图">稠密图</h2>
<pre><code>一个边数接近完全图的图
</code></pre>
<h2 id="稀疏图">稀疏图</h2>
<pre><code>一个边数远远少于完全图的图
</code></pre>
<h4 id="节点的度">节点的度</h4>
<pre><code>无向图中与结点相连的边的数目，称为结点的度
</code></pre>
<h4 id="结点的入度">结点的入度</h4>
<pre><code>在有向图中，以这个结点为终点的有向边的数目
</code></pre>
<h4 id="结点的出度">结点的出度</h4>
<pre><code>在有向图中，以这个结点为起点的又向边的数目
</code></pre>
<h4 id="权值">权值</h4>
<pre><code>边的“费用”或&quot;价值&quot; 可以理解为边的长度
</code></pre>
<h4 id="连通">连通</h4>
<pre><code>如果图中结点U，V之间存在一条从U通过若干条边，点到达V的通路，则称U，V是连通的
</code></pre>
<h4 id="回路">回路</h4>
<pre><code>起点与终点相同的路径，称为回路或环
</code></pre>
<h4 id="强连通分量">强连通分量</h4>
<pre><code>有向图中任意两点都连通的最大子图。特殊地，单个点也算一个强连通分量。
</code></pre>
<h1 id="图的存储">图的存储</h1>
<h2 id="邻接矩阵太浪费空间及时间">邻接矩阵（太浪费空间及时间）</h2>
<p>采用二维数组实现 如：int g[101][101]<br>
g[i][j]的值，表示从点vi到点vj中的边的权值<br>
ps：int类型最大0x7fffffff(16进制)<br>
存储稠密图时空间以及算力利用率要高一点</p>
<p>CODE:</p>
<pre><code class="language-cpp">   int g[N][N];
   void creae(int g[][]){
       int n,e,i,j;
       cin&gt;&gt;n&gt;&gt;e;
       for(int k=1;k&lt;=e;k++){
           cin&gt;&gt;i&gt;&gt;j;  //读入边
           g[i][j]=1;  //赋值，若为无向图还要个给
                       //g[j][i]赋值
       }
   }
</code></pre>
<h2 id="邻接表比邻接矩阵更节省时间">邻接表（比邻接矩阵更节省时间）</h2>
<p>PS:若用stl中的vector还可以节省空间！！！</p>
<p>见代码及注释</p>
<p>code：</p>
<pre><code class="language-cpp">   //a[i][j]表示和结点i相邻的第j个结点
   int a[N][N];
   cin&gt;&gt;n&gt;&gt;e;
   for(int  k=1;k&lt;=e;k++){
       cin&gt;&gt;i&gt;&gt;j;
       //a[i][0]记录与顶点i邻接的点的个数
       a[i][++a[i][0]]=j;
       a[j][++a[j][0]]=i;//存无向图时有这句,对称保存
   }
</code></pre>
<h2 id="边邻接表">边邻接表</h2>
<p>采用多个整形数组实现</p>
<p>CODE:<br>
存储完全图时 M=N*(N-1);</p>
<pre><code class="language-cpp">int first[N];/first[i]表示以i为起点的最大边号
int next[M];//next[k]表示和边K共起点的上一条边
int go[M];//go[k]表示边k的终点
int tot=0;
for(int k=1;k&lt;=e;k++){
    cin&gt;&gt;i&gt;&gt;j&gt;&gt;w;
    next[++tot]=first[i];
    first[i]=tot;   //更新i的数量
    go[tot]=j;//存边(i,j)
    next[++tot]=first[j];
    first[j]=tot;
    go[tot]=i;//存储边(j,i)
}
</code></pre>
<h1 id="图的遍历">图的遍历</h1>
<h2 id="深度优先遍历dfs">深度优先遍历（dfs）</h2>
<pre><code>以某个点作为起点，先将该点标记为已访问，然后递归访问所有与之相连且未被访问过的点。
</code></pre>
<p>CODE:</p>
<pre><code class="language-cpp">    #include&lt;iostream&gt;
    using namespace std;
    const int N=20;
    bool v[N];
    int n,m,x,y;
    bool g[N][N];
    void dfs(int st,bool v[]){
        cout&lt;&lt;st;
        v[st]=1;
        for(int i=1;i&lt;=n;i++){
            if(!v[i]&amp;&amp;g[st][i]==1) {
                cout&lt;&lt;&quot;-&gt;&quot;;
                dfs(i,v);
            }
        }
    }
    int main(){
        cin&gt;&gt;n&gt;&gt;m;
        for(int i=1;i&lt;=m;i++){
            cin&gt;&gt;x&gt;&gt;y;
            g[x][y]=1;
            g[y][x]=1;
        }
        dfs(1,v);

        return 0;
   }

</code></pre>
<h2 id="广度优先遍历bfs">广度优先遍历（bfs）</h2>
<pre><code class="language-cpp">    #include&lt;iostream&gt;
    using namespace std;
    const int N=20;
    bool v[N];
    int n,m,x,y;
    bool g[N][N];
    void dfs(int st,bool v[]){
        cout&lt;&lt;st;
        v[st]=1;
        for(int i=1;i&lt;=n;i++){
            if(!v[i]&amp;&amp;g[st][i]==1) {
                cout&lt;&lt;&quot;-&gt;&quot;;
                dfs(i,v);
            }
            
        }
    }
    void bfs(int st,bool v[]){

    }
    int main(){
        cin&gt;&gt;n&gt;&gt;m;
        for(int i=1;i&lt;=m;i++){
            cin&gt;&gt;x&gt;&gt;y;
            g[x][y]=1;
            g[y][x]=1;
        }
        dfs(1,v);

        return 0;
   }
</code></pre>
]]></content>
    </entry>
</feed>